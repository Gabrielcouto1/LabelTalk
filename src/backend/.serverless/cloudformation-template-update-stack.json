{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HealthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/label-talk-backend-dev-health"
      }
    },
    "InstagramUnderscorecaptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/label-talk-backend-dev-instagram_caption"
      }
    },
    "BookUnderscoresummaryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/label-talk-backend-dev-book_summary"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "label-talk-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/label-talk-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/label-talk-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "lambda:FullAccess",
                    "lambda:InvokeFunction"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rekognition:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": "label-talk-role"
      }
    },
    "HealthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/label-talk-backend/dev/1695163127670-2023-09-19T22:38:47.670Z/label-talk-backend.zip"
        },
        "Handler": "routes.health.handler",
        "Runtime": "python3.11",
        "FunctionName": "label-talk-backend-dev-health",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "REGION": "us-east-1",
            "BUCKET_NAME": "label-talk-bucket",
            "OPEN_AI_KEY": "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",
            "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
            "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: "
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HealthLogGroup"
      ]
    },
    "InstagramUnderscorecaptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/label-talk-backend/dev/1695163127670-2023-09-19T22:38:47.670Z/label-talk-backend.zip"
        },
        "Handler": "routes.instagram_caption.handler",
        "Runtime": "python3.11",
        "FunctionName": "label-talk-backend-dev-instagram_caption",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "REGION": "us-east-1",
            "BUCKET_NAME": "label-talk-bucket",
            "OPEN_AI_KEY": "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",
            "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
            "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: "
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:028538461261:layer:requests-python:1"
        ]
      },
      "DependsOn": [
        "InstagramUnderscorecaptionLogGroup"
      ]
    },
    "BookUnderscoresummaryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/label-talk-backend/dev/1695163127670-2023-09-19T22:38:47.670Z/label-talk-backend.zip"
        },
        "Handler": "routes.book_summary.handler",
        "Runtime": "python3.11",
        "FunctionName": "label-talk-backend-dev-book_summary",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "REGION": "us-east-1",
            "BUCKET_NAME": "label-talk-bucket",
            "OPEN_AI_KEY": "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",
            "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
            "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: "
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:028538461261:layer:requests-python:1"
        ]
      },
      "DependsOn": [
        "BookUnderscoresummaryLogGroup"
      ]
    },
    "HealthLambdaVersionMotVHl9bvuME0iISGYb5co32M32a8ccCHGXURp5hu1A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HealthLambdaFunction"
        },
        "CodeSha256": "FA57ypTxdC+m71m4TSautgy5n0eyunXMRBa4rhTZjxY="
      }
    },
    "InstagramUnderscorecaptionLambdaVersionTM6sjfdrvHmb026HYvHReWQv02lheL5Dl8fmO4uACw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InstagramUnderscorecaptionLambdaFunction"
        },
        "CodeSha256": "FA57ypTxdC+m71m4TSautgy5n0eyunXMRBa4rhTZjxY="
      }
    },
    "BookUnderscoresummaryLambdaVersionCtXRYE3AAn6z1YzLuImcrEleoTtUjY5eZOU5O9mexx0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BookUnderscoresummaryLambdaFunction"
        },
        "CodeSha256": "FA57ypTxdC+m71m4TSautgy5n0eyunXMRBa4rhTZjxY="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-label-talk-backend",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HealthLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HealthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHealth": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HealthLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGet": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHealth"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHealth"
    },
    "InstagramUnderscorecaptionLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InstagramUnderscorecaptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationInstagramUnderscorecaption": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "InstagramUnderscorecaptionLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostInsta": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /insta",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationInstagramUnderscorecaption"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationInstagramUnderscorecaption"
    },
    "BookUnderscoresummaryLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BookUnderscoresummaryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBookUnderscoresummary": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BookUnderscoresummaryLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostBook": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /book",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBookUnderscoresummary"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationBookUnderscoresummary"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "HealthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HealthLambdaVersionMotVHl9bvuME0iISGYb5co32M32a8ccCHGXURp5hu1A"
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-HealthLambdaFunctionQualifiedArn"
      }
    },
    "InstagramUnderscorecaptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InstagramUnderscorecaptionLambdaVersionTM6sjfdrvHmb026HYvHReWQv02lheL5Dl8fmO4uACw"
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-InstagramUnderscorecaptionLambdaFunctionQualifiedArn"
      }
    },
    "BookUnderscoresummaryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BookUnderscoresummaryLambdaVersionCtXRYE3AAn6z1YzLuImcrEleoTtUjY5eZOU5O9mexx0"
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-BookUnderscoresummaryLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-label-talk-backend-dev-HttpApiUrl"
      }
    }
  }
}