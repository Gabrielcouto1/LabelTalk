{
  "service": {
    "service": "label-talk-backend",
    "serviceObject": {
      "name": "label-talk-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.11",
      "environment": {
        "REGION": "us-east-1",
        "BUCKET_NAME": "label-talk-bucket",
        "OPEN_AI_KEY": "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",
        "MODEL_ID": "gpt-3.5-turbo",
        "GPT_ENDPOINT": "https://api.openai.com/v1/chat/completions",
        "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
        "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: ",
        "PRODUCT_PROMPT": "Tenho uma resposta do rekognition contendo as principais labels de uma foto de um produto. Quero que você crie uma descrição de 30 a 60 palavras do produto para colocar como descrição no meu e-commerce. Responda somente com a descrição e não use aspas. Labels: "
      },
      "iam": {
        "role": {
          "name": "label-talk-role",
          "statements": [
            {
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "lambda:FullAccess",
                "lambda:InvokeFunction"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "rekognition:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HealthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/label-talk-backend-dev-health"
            }
          },
          "InstagramUnderscorecaptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/label-talk-backend-dev-instagram_caption"
            }
          },
          "ProductUnderscorecaptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/label-talk-backend-dev-product_caption"
            }
          },
          "BookUnderscoresummaryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/label-talk-backend-dev-book_summary"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "label-talk-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/label-talk-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/label-talk-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "label-talk-role"
            }
          },
          "HealthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/label-talk-backend/dev/1695222926941-2023-09-20T15:15:26.941Z/label-talk-backend.zip"
              },
              "Handler": "routes.health.handler",
              "Runtime": "python3.11",
              "FunctionName": "label-talk-backend-dev-health",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "BUCKET_NAME": "label-talk-bucket",
                  "OPEN_AI_KEY": "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",
                  "MODEL_ID": "gpt-3.5-turbo",
                  "GPT_ENDPOINT": "https://api.openai.com/v1/chat/completions",
                  "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
                  "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: ",
                  "PRODUCT_PROMPT": "Tenho uma resposta do rekognition contendo as principais labels de uma foto de um produto. Quero que você crie uma descrição de 30 a 60 palavras do produto para colocar como descrição no meu e-commerce. Responda somente com a descrição e não use aspas. Labels: "
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HealthLogGroup"
            ]
          },
          "InstagramUnderscorecaptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/label-talk-backend/dev/1695222926941-2023-09-20T15:15:26.941Z/label-talk-backend.zip"
              },
              "Handler": "routes.instagram_caption.handler",
              "Runtime": "python3.11",
              "FunctionName": "label-talk-backend-dev-instagram_caption",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "BUCKET_NAME": "label-talk-bucket",
                  "OPEN_AI_KEY": "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",
                  "MODEL_ID": "gpt-3.5-turbo",
                  "GPT_ENDPOINT": "https://api.openai.com/v1/chat/completions",
                  "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
                  "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: ",
                  "PRODUCT_PROMPT": "Tenho uma resposta do rekognition contendo as principais labels de uma foto de um produto. Quero que você crie uma descrição de 30 a 60 palavras do produto para colocar como descrição no meu e-commerce. Responda somente com a descrição e não use aspas. Labels: "
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:028538461261:layer:requests-python:1"
              ]
            },
            "DependsOn": [
              "InstagramUnderscorecaptionLogGroup"
            ]
          },
          "ProductUnderscorecaptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/label-talk-backend/dev/1695222926941-2023-09-20T15:15:26.941Z/label-talk-backend.zip"
              },
              "Handler": "routes.product_caption.handler",
              "Runtime": "python3.11",
              "FunctionName": "label-talk-backend-dev-product_caption",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "BUCKET_NAME": "label-talk-bucket",
                  "OPEN_AI_KEY": "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",
                  "MODEL_ID": "gpt-3.5-turbo",
                  "GPT_ENDPOINT": "https://api.openai.com/v1/chat/completions",
                  "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
                  "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: ",
                  "PRODUCT_PROMPT": "Tenho uma resposta do rekognition contendo as principais labels de uma foto de um produto. Quero que você crie uma descrição de 30 a 60 palavras do produto para colocar como descrição no meu e-commerce. Responda somente com a descrição e não use aspas. Labels: "
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:028538461261:layer:requests-python:1"
              ]
            },
            "DependsOn": [
              "ProductUnderscorecaptionLogGroup"
            ]
          },
          "BookUnderscoresummaryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/label-talk-backend/dev/1695222926941-2023-09-20T15:15:26.941Z/label-talk-backend.zip"
              },
              "Handler": "routes.book_summary.handler",
              "Runtime": "python3.11",
              "FunctionName": "label-talk-backend-dev-book_summary",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "BUCKET_NAME": "label-talk-bucket",
                  "OPEN_AI_KEY": "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",
                  "MODEL_ID": "gpt-3.5-turbo",
                  "GPT_ENDPOINT": "https://api.openai.com/v1/chat/completions",
                  "INSTA_PROMPT": "I have a response about a photo analized by aws-Rekognition. It returned the main labels:I want you to generate a subtitle for this photo to put on an instagram post. Translate it to portuguese. Answer with only the subtitle (15-25 words). Main Labels: ",
                  "BOOK_PROMPT": "Tenho a resposta do Rekognition lendo o texto da capa de um livro. Com base nas strings analisadas pelo rekognition, me gere um resumo do livro. Me responda apenas com o resumo. Strings: ",
                  "PRODUCT_PROMPT": "Tenho uma resposta do rekognition contendo as principais labels de uma foto de um produto. Quero que você crie uma descrição de 30 a 60 palavras do produto para colocar como descrição no meu e-commerce. Responda somente com a descrição e não use aspas. Labels: "
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:028538461261:layer:requests-python:1"
              ]
            },
            "DependsOn": [
              "BookUnderscoresummaryLogGroup"
            ]
          },
          "HealthLambdaVersionzVCErUx3MMGuEBqLOAX5PHM7A4C7o6G4RWZRiqNNR0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthLambdaFunction"
              },
              "CodeSha256": "uLBHWPrw12FM4MjT3SjiiLIz5AGTFtj4LJJWnSQhrMQ="
            }
          },
          "InstagramUnderscorecaptionLambdaVersionjOKhXVTx1WIOvl8Zv0d5DDk3C10KA3yZVWGNFqHH0Co": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InstagramUnderscorecaptionLambdaFunction"
              },
              "CodeSha256": "uLBHWPrw12FM4MjT3SjiiLIz5AGTFtj4LJJWnSQhrMQ="
            }
          },
          "ProductUnderscorecaptionLambdaVersionV1DU4QQQ6gGmbPTMXN69TM1o8Z2OmCP6Jh2dTBwEwI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProductUnderscorecaptionLambdaFunction"
              },
              "CodeSha256": "uLBHWPrw12FM4MjT3SjiiLIz5AGTFtj4LJJWnSQhrMQ="
            }
          },
          "BookUnderscoresummaryLambdaVersionDurxdFFSfnvVyX2TZrucNNXn2QJPxhBhQR6Z3lsfq0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BookUnderscoresummaryLambdaFunction"
              },
              "CodeSha256": "uLBHWPrw12FM4MjT3SjiiLIz5AGTFtj4LJJWnSQhrMQ="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-label-talk-backend",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HealthLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHealth": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HealthLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHealth"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHealth"
          },
          "InstagramUnderscorecaptionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InstagramUnderscorecaptionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationInstagramUnderscorecaption": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InstagramUnderscorecaptionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostInsta": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /insta",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationInstagramUnderscorecaption"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationInstagramUnderscorecaption"
          },
          "ProductUnderscorecaptionLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProductUnderscorecaptionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationProductUnderscorecaption": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProductUnderscorecaptionLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostProduct": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /product",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationProductUnderscorecaption"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationProductUnderscorecaption"
          },
          "BookUnderscoresummaryLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BookUnderscoresummaryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationBookUnderscoresummary": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BookUnderscoresummaryLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostBook": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /book",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationBookUnderscoresummary"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationBookUnderscoresummary"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "HealthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthLambdaVersionzVCErUx3MMGuEBqLOAX5PHM7A4C7o6G4RWZRiqNNR0"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-HealthLambdaFunctionQualifiedArn"
            }
          },
          "InstagramUnderscorecaptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InstagramUnderscorecaptionLambdaVersionjOKhXVTx1WIOvl8Zv0d5DDk3C10KA3yZVWGNFqHH0Co"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-InstagramUnderscorecaptionLambdaFunctionQualifiedArn"
            }
          },
          "ProductUnderscorecaptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProductUnderscorecaptionLambdaVersionV1DU4QQQ6gGmbPTMXN69TM1o8Z2OmCP6Jh2dTBwEwI"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-ProductUnderscorecaptionLambdaFunctionQualifiedArn"
            }
          },
          "BookUnderscoresummaryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BookUnderscoresummaryLambdaVersionDurxdFFSfnvVyX2TZrucNNXn2QJPxhBhQR6Z3lsfq0"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-BookUnderscoresummaryLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-label-talk-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "health": {
        "handler": "routes.health.handler",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "name": "label-talk-backend-dev-health",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "HealthLambdaVersionzVCErUx3MMGuEBqLOAX5PHM7A4C7o6G4RWZRiqNNR0"
      },
      "instagram_caption": {
        "handler": "routes.instagram_caption.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InstagramUnderscorecaptionLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "path": "/insta",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/insta"
          }
        ],
        "Timeout": 15,
        "name": "label-talk-backend-dev-instagram_caption",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "InstagramUnderscorecaptionLambdaVersionjOKhXVTx1WIOvl8Zv0d5DDk3C10KA3yZVWGNFqHH0Co"
      },
      "product_caption": {
        "handler": "routes.product_caption.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProductUnderscorecaptionLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "path": "/product",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/product"
          }
        ],
        "Timeout": 15,
        "name": "label-talk-backend-dev-product_caption",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "ProductUnderscorecaptionLambdaVersionV1DU4QQQ6gGmbPTMXN69TM1o8Z2OmCP6Jh2dTBwEwI"
      },
      "book_summary": {
        "handler": "routes.book_summary.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BookUnderscoresummaryLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "httpApi": {
              "path": "/book",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/book"
          }
        ],
        "Timeout": 15,
        "name": "label-talk-backend-dev-book_summary",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.11",
        "vpc": {},
        "versionLogicalId": "BookUnderscoresummaryLambdaVersionDurxdFFSfnvVyX2TZrucNNXn2QJPxhBhQR6Z3lsfq0"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "label-talk-backend",
      "frameworkVersion": "3",
      "useDotenv": true,
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Livius\\Desktop\\BSI\\TechWeek\\prototipo\\git\\LabelTalk\\src\\backend\\.serverless\\label-talk-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/label-talk-backend/dev/1695222926941-2023-09-20T15:15:26.941Z",
    "artifact": "label-talk-backend.zip"
  }
}